Select the names and categories for all products. If any of the columns is a NULL, write 'n/a' instead. Name the columns name and category.
SELECT COALESCE(name, 'n/a') as name, coalesce(category, 'n/a') as category
FROM product

Show the following sentence: Product X is made in Y. Where X is the name and Y is the production_area. If the name is not provided, write 'unknown name' instead. If the production_area is not provided, write 'unknown area'. Name the column sentence
SELECT 'Product'||' '|| coalesce(name, 'unknown name')||' '|| 'is made in' ||' '|| coalesce(production_area, 'unknown area') || '.' as sentence
FROM product

The company organized a discount campaign on all prices: -10%.
Show the names of all products together with their price and the new prices (name the column new_price). If there is no price, show 0.00 in the column new_price. Round the result to two decimal points.
SELECT name, price, round(coalesce(price * 0.9,0.00),2) as new_price
FROM product

Show the name of each product together with its type. When the type is unknown, show the category. When the category is missing too, show 'No clue what that is'. Name the column type
SELECT name, COALESCE(type, cast(category as varchar), 'No clue what that is') as type
FROM product

Mr Amund wants to offer a new promotion.
The promotion is as follows: every customer who orders a product and picks it up on their own (i.e., no shipping required) can buy it at a special price: the initial price MINUS the shipping_cost! If the shipping_cost is greater than the price itself, then the customer still pays the difference (i.e. the absolute value of price - shipping_cost).
Our customer has $1,000.00 again and wants to know how many products of each kind they could buy. Show each product name with the column quantity which calculates the number of products. Drop the decimal part. If you get a price of 0.00, show NULL instead.
SELECT
  name,
  floor(1000.00 / NULLIF(abs(price - shipping_cost), 0)) AS quantity
FROM product;

Show the name of all products together with their price. If the price is equal to 19.99 change it to NULL. However, make sure there aren't any NULLs in the price column, show 'unknown' instead of them. Make sure the latter column is named price.
SELECT name, COALESCE(cast(nullif(price,19.99) as varchar), 'unknown') as price
FROM product

For each advertisement, show its id, country, start_date and end_date together with the name of the product advertised.
If there is no start_date or no end_date, show 'n/a' instead. If there is no name of the product, show 'no name'. Order the results by the start_date, with the oldest dates shown first. The column names should be: id, country, start_date, end_date, and name.
SELECT a.id as id, a.country as country,
		COALESCE(cast(a.start_date as varchar), 'n/a') as start_date,
		COALESCE(cast(a.end_date as varchar),'n/a') as end_date, 
        COALESCE(cast(p.name as varchar), 'no name') as name
FROM advertisement as a join product as p
ON p.id = a.product_id
ORDER BY start_date asc

For each product with a non-NULL name, show its id and the number of advertisements associated with it. Sort the results by the id in descending order.
SELECT p.id, count(a.id) 
FROM product as p left join advertisement as a
ON p.id = a.product_id
WHERE name is not null
GROUP by p.id
ORDER BY id desc

For each advertisement, show its id and the following sentence (as sentence):
The advertisement with id {id} for the product {name} was started on {date}.
Replace {id}, {name} and {date} with the proper columns. If there is no name, show the product id, if the product id is missing too, show 'no name'. If there is no started_date, show 'n/a'. Ignore products with missing price.
SELECT A.ID, 'The advertisement with id '||A.ID||' for the product '||
COALESCE(P.NAME, CAST(P.ID AS VARCHAR), 'no name')||' was started on '||COALESCE(CAST(A.START_DATE AS VARCHAR), 'n/a')||'.' AS SENTENCE
FROM ADVERTISEMENT A JOIN PRODUCT P
ON A.PRODUCT_ID = P.ID
WHERE P.PRICE IS NOT NULL;

SELECT a.id, concat('The advertisement with id',' ',
              COALESCE(cast(a.id as varchar), 'no name'), ' for the product',' ', 
              COALESCE(cast(name as varchar),'id'),' ','was started',' ','on',' ', 
              COALESCE(cast(a.start_date as varchar),'n/a'),'.') as sentence
FROM product as p join advertisement as a
ON p.id = a.product_id
WHERE p.price is not null
