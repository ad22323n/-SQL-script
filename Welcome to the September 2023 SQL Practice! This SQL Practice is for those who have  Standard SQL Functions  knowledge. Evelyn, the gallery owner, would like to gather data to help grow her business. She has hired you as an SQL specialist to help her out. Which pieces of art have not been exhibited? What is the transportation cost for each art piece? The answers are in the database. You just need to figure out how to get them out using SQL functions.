Task 1
Evelyn is preparing for a new exhibition. She has noticed she is missing biographies for some artists. She would like to contact them and ask them to provide her with a short biography for use in her gallery. Will you find out which artists have missing biographies?Display the names and the emails of the artists whose biographies are missing. Sort the rows alphabetically by the artist's name.
SELECT name, email
FROM artist
WHERE biography is null
ORDER BY name asc

Task 2
Well done! Now, Evelyn would like to generate new captions for all the art pieces in the gallery. Will you help her with this task
Display a list of all art pieces. The result should contain the artwork ID and one additional column called caption. The caption should look like this: 'Artist: < the artist's name >, title: < the title of the art piece >'. If the artist is not found, display 'unknown' instead of the artist's name. Sort the results by the artwork ID in ascending order.
SELECT art.id, concat('Artist: ', COALESCE(a.name,'unknown'), ', ','title: ', art.title) as caption
FROM artwork as art left join artist as a
ON a.id = art.artist_id
ORDER BY art.id asc

Task 3
Evelyn would like to see a list of the exhibitions that took place from May to July 2023. Are you able to find this information in the database?
Retrieve the title, the start date, the end date, and the description for each exhibition that took place from May to July 2023 (that is, those that started on or after May 1, 2023, and ended on or before July 31, 2023). Sort the results alphabetically by the exhibition title.
SELECT title, start_date, end_date, description
FROM exhibition
WHERE start_date between '2023-01-01' and '2023-07-01'
ORDER BY title asc

Task 4
Excellent! Now, Evelyn is wondering what the average length of the artist biographies is. Let's find it in the database!
Show the average length of the biographies of the artists. Name this column average_bio_length. Round the result down to the nearest integer.
Keep in mind that some biographies are missing. So, when calculating the average, make sure to handle NULL values correctly. That is, treat a NULL value as if it were a biography with a length of 0 characters.
SELECT floor(avg(length(COALESCE(biography, '')))) as average_bio_length
FROM artist

Task 5
Next, Evelyn would like to know which art pieces have not yet been shown in an exhibition. Do you know how to find this information in the database?
Display the title, the description, and the medium used for each art piece that has not been a part of any exhibition.
SELECT artwork.title, artwork.description, artwork.medium
FROM artwork
LEFT JOIN exhibition_artwork 
  ON artwork.id = exhibition_artwork.artwork_id
WHERE exhibition_artwork.exhibition_id IS NULL;

Task 6
You nailed it! Now, Evelyn has asked you to retrieve the list of all artists with the first 100 characters of their respective biographies. Will you generate such a list? Display the artist's name, birth date, nationality, and the first 100 characters of his/her biography followed by three dots (...) if the biography is longer than 100 characters (name this column truncated_biography). If the biography has 100 or fewer characters, display the entire biography in the same column.
SELECT artist.name, artist.birth_date, artist.nationality, 
	CASE WHEN length(biography) <= 100 THEN biography
    ELSE substring(biography, 1, 100) || '...'
    END as truncated_biography
FROM artist

Task 7
Evelyn is planning to send some art pieces from her collection to an exhibition in a museum located in another city. She would like to see the cost to transport each art piece. Will you find this out using your SQL skills?Display the title of the art piece (name the column artwork_title), its dimensions (name the column dimensions; it should consist of the width and height values separated by an 'x' character, for example, '10x10'), and the cost to transport the art piece (name this column transport_cost).The transport cost should be calculated based on the width and height of the piece. If both width and height are less than or equal to 50 cm, then calculate the cost using the formula: (width + height) * 1.75. If the width and/or height is greater than 50cm, but both width and height are less than or equal to 100 cm, then calculate the cost using the formula: (width + height) * 3.75. Art pieces whose width and/or height is greater than 100cm have a flat rate of 1500 dollars each. Round the cost up to the nearest integer. Sort the results by the transportation cost from the highest to the lowest.
SELECT title as artwork_title, width ||  'x'  || height as dimensions,
	CASE 
        WHEN width <=50 and height <=50 THEN CEIL((width+height) * 1.75)
        WHEN width <=100 and height <=100 THEN CEIL((width + height) * 3.75)
    	ELSE 1500
    END as transport_cost      
FROM artwork
ORDER BY transport_cost DESC

Task 8
Evelyn would like to prepare a list of all artists, showing for each artist the number of art pieces sold, the average price per piece, and the total amount of money made from selling the art pieces. Will you help her with this?For each artist, display the artist ID, the artist name, the number of art pieces sold (name this column sold_artwork_count), the average price of the art pieces sold (name this column average_price and round it to 2 decimal places), and the total amount of money made from selling the artwork (name this column total_earnings). Be sure to handle the scenario in which an artist may not have yet sold any art pieces (resulting in NULL values). If an artist has not yet sold any artwork, display 0 as total_earnings. Sort the results by the total earnings from the highest to the lowest and then by the artist name
SELECT artist.id, artist.name, count(sale.artwork_id) as sold_artwork_count, 
	   round(avg(COALESCE(sale.price,0)),2) as average_price, COALESCE(sum(sale.price),0) as total_earnings    
FROM artist left join artwork
ON artist.id = artwork.artist_id
LEFT JOIN sale
ON  artwork.id = sale.artwork_id
Group by artist.id
ORDER BY total_earnings DESC, artist.name
